[gd_scene load_steps=6 format=2]

[ext_resource path="res://GlobalShader.gd" type="Script" id=1]

[sub_resource type="Shader" id=4]
code = "shader_type canvas_item;

uniform bool Active = true;

vec4 sample_glow_pixel(sampler2D tex, vec2 uv) {
	float hdr_threshold = 0.2; // How much glow?
	return max(textureLod(tex, uv, 2.0) - hdr_threshold, vec4(0.0));
}

void fragment() {
	if (Active) {
		vec2 ps = SCREEN_PIXEL_SIZE;
		// Get blurred color from pixels considered glowing
		vec4 col0 = sample_glow_pixel(SCREEN_TEXTURE, SCREEN_UV + vec2(-ps.x, 0));
		vec4 col1 = sample_glow_pixel(SCREEN_TEXTURE, SCREEN_UV + vec2(ps.x, 0));
		vec4 col2 = sample_glow_pixel(SCREEN_TEXTURE, SCREEN_UV + vec2(0, -ps.y));
		vec4 col3 = sample_glow_pixel(SCREEN_TEXTURE, SCREEN_UV + vec2(0, ps.y));
		
		vec4 col = texture(SCREEN_TEXTURE, SCREEN_UV);
		vec4 glowing_col = 0.25 * (col0 + col1 + col2 + col3);
		
		vec4 px = vec4(col.rgb + glowing_col.rgb, col.a);
		COLOR = vec4(px.rgb,1.0);
	}
}"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/Active = true

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

uniform bool Active = false;

uniform float screen_width = 1024;
uniform float screen_height = 600;

// Curvature
uniform float BarrelPower =1.1;
// Color bleeding
uniform float color_bleeding = 1.2;
uniform float bleeding_range_x = 3;
uniform float bleeding_range_y = 3;
// Scanline
uniform float lines_distance = 4.0;
uniform float scan_size = 2.0;
uniform float scanline_alpha = 0.9;
uniform float lines_velocity = 30.0;

vec2 distort(vec2 p) {
	float angle = p.y / p.x;
	float theta = atan(p.y,p.x);
	float radius = pow(length(p), BarrelPower);
	
	p.x = radius * cos(theta);
	p.y = radius * sin(theta);
	
	return 0.5 * (p + vec2(1.0,1.0));
}

void get_color_bleeding(inout vec4 current_color,inout vec4 color_left) {
	current_color = current_color*vec4(color_bleeding,0.5,1.0-color_bleeding,1);
	color_left = color_left*vec4(1.0-color_bleeding,0.5,color_bleeding,1);
}

void get_color_scanline(vec2 uv,inout vec4 c,float time) {
	float line_row = floor((uv.y * screen_height/scan_size) + mod(time*lines_velocity, lines_distance));
	float n = 1.0 - ceil((mod(line_row,lines_distance)/lines_distance));
	c = c - n*c*(1.0 - scanline_alpha);
	c.a = 1.0;
}

void fragment() {
	if (Active) {
		vec2 xy = SCREEN_UV * 2.0;
		xy.x -= 1.0;
		xy.y -= 1.0;

		float d = length(xy);
		if (d < 1.5) {
			xy = distort(xy);
		}
		else {
			xy = SCREEN_UV;
		}

		float pixel_size_x = 1.0 / screen_width * bleeding_range_x;
		float pixel_size_y = 1.0 / screen_height * bleeding_range_y;
		vec4 color_left = texture(SCREEN_TEXTURE, xy - vec2(pixel_size_x, pixel_size_y));
		vec4 current_color = texture(SCREEN_TEXTURE, xy);
		get_color_bleeding(current_color, color_left);
		vec4 c = current_color + color_left;
		get_color_scanline(xy, c, TIME);
		COLOR = c;
	}
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 3 )
shader_param/Active = false
shader_param/screen_width = 576.0
shader_param/screen_height = 576.0
shader_param/BarrelPower = 1.01
shader_param/color_bleeding = 1.0
shader_param/bleeding_range_x = 1.0
shader_param/bleeding_range_y = 1.0
shader_param/lines_distance = 2.0
shader_param/scan_size = 2.0
shader_param/scanline_alpha = 0.95
shader_param/lines_velocity = 2.0

[node name="GlobalShader" type="CanvasLayer"]
layer = 10
script = ExtResource( 1 )

[node name="Glow" type="CanvasLayer" parent="."]
layer = 11

[node name="Shader" type="ColorRect" parent="Glow"]
material = SubResource( 5 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
color = Color( 1, 1, 1, 0 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Retro" type="CanvasLayer" parent="."]
layer = 12

[node name="Shader" type="ColorRect" parent="Retro"]
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
color = Color( 1, 1, 1, 0 )
__meta__ = {
"_edit_use_anchors_": false
}
